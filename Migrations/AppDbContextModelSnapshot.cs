// <auto-generated />
using System;
using CarShare.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarShare.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarShare.Models.AccountApprovalRequest", b =>
                {
                    b.Property<int>("AccountApprovalRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountApprovalRequestId"));

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("AccountApprovalRequestId");

                    b.HasIndex("UserId");

                    b.ToTable("AccountApprovalRequests");
                });

            modelBuilder.Entity("CarShare.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarId"));

                    b.Property<DateTime>("AvailableAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CarType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsRented")
                        .HasColumnType("boolean");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("Transmission")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("CarId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("CarShare.Models.CarPost", b =>
                {
                    b.Property<int>("CarPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarPostId"));

                    b.Property<DateTime>("AvailableFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("AvailableTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RentalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CarPostId");

                    b.HasIndex("CarId")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("CarPosts");
                });

            modelBuilder.Entity("CarShare.Models.CarProposal", b =>
                {
                    b.Property<int>("CarProposalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarProposalId"));

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<int>("CarPostId")
                        .HasColumnType("integer");

                    b.Property<string>("LicenseDocumentPath")
                        .HasColumnType("text");

                    b.Property<string>("ProposalDocumentPath")
                        .HasColumnType("text");

                    b.Property<int>("RenterId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CarProposalId");

                    b.HasIndex("CarId");

                    b.HasIndex("CarPostId");

                    b.HasIndex("RenterId");

                    b.ToTable("CarProposals");
                });

            modelBuilder.Entity("CarShare.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("CarId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("RenterId")
                        .HasColumnType("integer");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CarId");

                    b.HasIndex("RenterId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("CarShare.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CarShare.Models.PostApprovalRequest", b =>
                {
                    b.Property<int>("PostApprovalRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PostApprovalRequestId"));

                    b.Property<int>("CarPostId")
                        .HasColumnType("integer");

                    b.Property<int>("IsApproved")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PostApprovalRequestId");

                    b.HasIndex("CarPostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostApprovalRequest");
                });

            modelBuilder.Entity("CarShare.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("CarOwnerApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCarOwner")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRenter")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarShare.Models.AccountApprovalRequest", b =>
                {
                    b.HasOne("CarShare.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarShare.Models.Car", b =>
                {
                    b.HasOne("CarShare.Models.User", "Owner")
                        .WithMany("Car")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CarShare.Models.CarPost", b =>
                {
                    b.HasOne("CarShare.Models.Car", "Car")
                        .WithOne("CarPost")
                        .HasForeignKey("CarShare.Models.CarPost", "CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarShare.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarShare.Models.User", "Owner")
                        .WithMany("CarPosts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Location");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CarShare.Models.CarProposal", b =>
                {
                    b.HasOne("CarShare.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarShare.Models.CarPost", "CarPost")
                        .WithMany()
                        .HasForeignKey("CarPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarShare.Models.User", "Renter")
                        .WithMany("Proposals")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("CarPost");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("CarShare.Models.Feedback", b =>
                {
                    b.HasOne("CarShare.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarShare.Models.User", "Renter")
                        .WithMany("Feedbacks")
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("CarShare.Models.PostApprovalRequest", b =>
                {
                    b.HasOne("CarShare.Models.CarPost", "CarPost")
                        .WithMany()
                        .HasForeignKey("CarPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarShare.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarPost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarShare.Models.Car", b =>
                {
                    b.Navigation("CarPost");
                });

            modelBuilder.Entity("CarShare.Models.User", b =>
                {
                    b.Navigation("Car");

                    b.Navigation("CarPosts");

                    b.Navigation("Feedbacks");

                    b.Navigation("Proposals");
                });
#pragma warning restore 612, 618
        }
    }
}
